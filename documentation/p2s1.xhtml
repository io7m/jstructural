<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>io7m-jstructural 5.0.0-SNAPSHOT Documentation: 2.1. API Tutorial</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://io7m.github.io/jstructural">io7m-jstructural</a> 5.0.0-SNAPSHOT
  </div>
</div><div class="st200_navbar st200_navbar_top"><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_title_cell">2. API Tutorial</td><td class="st200_navbar_up_title_cell">2. API Tutorial</td><td class="st200_navbar_next_title_cell">3. API Reference</td></tr><tr><td class="st200_navbar_prev_file_cell"><a href="p2.xhtml#st200_p2">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p3.xhtml#st200_p3">Next</a></td></tr></table><hr class="st200_hr"/></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s1" href="#st200_p2s1">2.1</a></div><div class="st200_section_title">API Tutorial</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss1" href="#st200_p2s1ss1">2.1.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss1pg1" href="#st200_p2s1ss1pg1">1</a></div><div class="st200_paragraph">
        The <span class="st200_term package">jstructural</span> API is divided
        into <span class="st200_term keyword">core</span> and <span class="st200_term keyword">annotated</span>
        types. The <span class="st200_term keyword">core</span> types have an (almost) 1:1
        correspondence with the elements that a document author writes in XML. The
        <a class="st200_link_external" href="apidocs/com/io7m/jstructural/xom/SDocumentParser.html">parser</a>
        included with the <a class="st200_link_external" href="http://xom.nu">XOM</a> backend,
        for example, produces a document consisting of elements of the
        <span class="st200_term keyword">core</span> types from an XML file. The
        <span class="st200_term keyword">annotated</span> types are, unsurprisingly,
        values of the <span class="st200_term keyword">core</span> types with additional
        annotations and metadata required to actually produce documents in XHTML
        format.
      </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss2" href="#st200_p2s1ss2">2.1.2</a></div><div class="st200_subsection_title">Usage</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg1" href="#st200_p2s1ss2pg1">1</a></div><div class="st200_paragraph">
        Parsing documents and producing XHTML output is quite simple. First,
        a stream representing an XML file is given to the included
        <a class="st200_link_external" href="apidocs/com/io7m/jstructural/xom/SDocumentParser.html">parser</a>,
        which parses and validates the document against the
        <span class="st200_term package">structural</span> schema.
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss2fo1" href="#st200_p2s1ss2fo1">2.1.2.1. Parsing</a></div><pre class="st200_verbatim">
URI uri;
Log log;
InputStream stream;        

final SDocument doc = SDocumentParser.fromStream(stream, uri, log);
        </pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg2" href="#st200_p2s1ss2pg2">2</a></div><div class="st200_paragraph">
        Then, the resulting document is annotated with the included
        <a class="st200_link_external" href="apidocs/com/io7m/jstructural/annotated/SAnnotator.html">annotator</a>:
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss2fo2" href="#st200_p2s1ss2fo2">2.1.2.2. Annotation</a></div><pre class="st200_verbatim">
Log log;
SDocument doc;       

final SADocument adoc = SAnnotator.document (doc, log);
        </pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg3" href="#st200_p2s1ss2pg3">3</a></div><div class="st200_paragraph">
        Finally, either the
        <a class="st200_link_external" href="apidocs/com/io7m/jstructural/xom/SDocumentXHTMLWriterSingle.html">single-page writer</a>
        or
        <a class="st200_link_external" href="apidocs/com/io7m/jstructural/xom/SDocumentXHTMLWriterMulti.html">multi-page writer</a>
        are used to produce a set of XHTML documents that can be serialized
        using the standard XOM serializer.
      </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss2fo3" href="#st200_p2s1ss2fo3">2.1.2.3. Writing</a></div><pre class="st200_verbatim">
Log log;
SADocument doc;
SDocumentXHTMLWriterCallbacks callbacks;      

SDocumentXHTMLWriterSingle writer = new SDocumentXHTMLWriterSingle();
SortedMap&lt;String, Document&gt; pages = writer.writeDocuments(callbacks, doc);
        </pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg4" href="#st200_p2s1ss2pg4">4</a></div><div class="st200_paragraph">
        The map returned by the <span class="st200_term function">writeDocuments</span>
        function is a set of mappings from file names to documents.
      </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg5" href="#st200_p2s1ss2pg5">5</a></div><div class="st200_paragraph">
        The writers take a set of callbacks as arguments that can be used
        to customize the resulting output. See the 
        <a class="st200_link_external" href="apidocs/com/io7m/jstructural/xom/SDocumentXHTMLWriterCallbacks.html">javadoc</a>
        for details.
      </div></div></div></div><div class="st200_navbar st200_navbar_bottom"><hr class="st200_hr"/><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_file_cell"><a href="p2.xhtml#st200_p2">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p3.xhtml#st200_p3">Next</a></td></tr><tr><td class="st200_navbar_prev_title_cell">2. API Tutorial</td><td class="st200_navbar_up_title_cell">2. API Tutorial</td><td class="st200_navbar_next_title_cell">3. API Reference</td></tr></table></div></div></body></html>
